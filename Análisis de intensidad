import asyncio
import httpx
import json
import re
from tqdm import tqdm

API_KEY = "tu_api_key"  # <-- Sustituye con tu clave real
API_URL = "https://api.deepseek.com/v1/chat/completions"
MODELO = "deepseek-chat"
INPUT_PATH = "resultados/frases_contexto.json"
OUTPUT_PATH = "resultados/analisis_intensidad.json"

async def analizar_intensidad(frase: str):
    prompt = f"""
Analiza la siguiente frase, identificando:

1. La etapa del proceso científico a la que se refiere, elije solo una:
- "Definición del problema"
- "Diseño metodológico"
- "Recolección de datos"
- "Análisis de datos"
- "Interpretación de resultados"
- "Toma de decisiones"
- "Comunicación de resultados"

2. El nivel de participación ciudadana, según esta clasificación:

- No hay participación 

- Contributivo (Participación mínima): 
    Ciudadanía: Recolecta datos, observa, aporta puntualmente.
    Científico/a: Diseña y controla todo el análisis.
    Ejemplo: “Los ciudadanos enviaban fotos mediante una app.”

- Colaborativo (Participación consultiva):
    Ciudadanía: Aporta datos y colabora en análisis básicos.
    Científico/a: Supervisa con retroalimentación parcial.   
    Ejemplo: “Los participantes ayudaron a ajustar el protocolo de muestreo.”

- Co-creativo (Participación colaborativa):
    Ciudadanía: Participa en el diseño, metodología, y análisis.
    Científico/a: Actúa como socio y facilitador.
    Ejemplo: “La comunidad definió las preguntas junto al equipo científico.”

- Liderado por la ciudadanía (Participación plena):
    Ciudadanía: Lidera el proyecto, toma decisiones, coordina.
    Científico/a: Apoya como asesor técnico si es necesario.
    Ejemplo: “El colectivo vecinal diseñó y gestionó el proyecto de monitoreo.”

3. Asigna un score de 0 a 4:
- 0 = No hay participación 
- 1 = Contributivo
- 2 = Colaborativo
- 3 = Co-creativo
- 4 = Liderado por la ciudadanía

Frase:
"{frase}"

Devuelve un JSON con esta estructura:

{{
  "etapa": "...",
  "nivel": "...",
  "score": 0,
  "evidencia": "..."
}}
"""
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": MODELO,
        "messages": [
            {"role": "system", "content": "Eres un experto en participación ciudadana en ciencia."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.1,
        "max_tokens": 500
    }

    async with httpx.AsyncClient(timeout=90.0) as client:
        r = await client.post(API_URL, headers=headers, json=payload)
        r.raise_for_status()
        content = r.json()["choices"][0]["message"]["content"]
        match = re.search(r'\{.*\}', content, re.DOTALL)
        if match:
            return json.loads(match.group())
        else:
            return {"error": "No se pudo extraer JSON de la respuesta"}

async def ejecutar_analisis_intensidad():
    with open(INPUT_PATH, "r", encoding="utf-8") as f:
        documentos = json.load(f)

    for doc in documentos:
        print(f"\n📄 Analizando INTENSIDAD en: {doc['archivo']}")
        for frase_data in tqdm(doc["frases_contextualizadas"], desc="Intensidad"):
            if frase_data["tipo"] == "intensidad" and frase_data["requiere_contexto"] is False:
                try:
                    resultado = await analizar_intensidad(frase_data["frase"])
                    frase_data["resultado"] = resultado
                except Exception as e:
                    frase_data["resultado"] = {"error": str(e)}

    with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
        json.dump(documentos, f, indent=2, ensure_ascii=False)

    print(f"\n✅ Análisis de intensidad completado → {OUTPUT_PATH}")

if __name__ == "__main__":
    asyncio.run(ejecutar_analisis_intensidad())

