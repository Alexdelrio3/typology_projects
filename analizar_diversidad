import asyncio
import httpx
import json
import re
from tqdm import tqdm

API_KEY = "tu_api_key"  # <-- Sustituye con tu clave real
API_URL = "https://api.deepseek.com/v1/chat/completions"
MODELO = "deepseek-chat"
INPUT_PATH = "resultados/analisis_intensidad.json"
OUTPUT_PATH = "resultados/analisis_diversidad.json"

async def analizar_diversidad(frase: str):
    prompt = f"""
Analiza la siguiente frase relacionada con diversidad de participaciÃ³n ciudadana:

"{frase}"

EvalÃºa si la frase contiene informaciÃ³n sobre alguno de los siguientes tipos de diversidad:

1. Diversidad cognitiva (saberes, conocimientos, marcos de pensamiento):
   - SubcategorÃ­as: Conocimientos tÃ©cnicos, Habilidades prÃ¡cticas, Marcos conceptuales diversos, Enfoques interdisciplinarios

2. Diversidad institucional (tipos de organizaciones implicadas):
   - SubcategorÃ­as: Organizaciones formales, Iniciativas informales, Redes comunitarias, Estructuras hÃ­bridas

3. Diversidad social (culturas, redes, trayectorias vitales):
   - SubcategorÃ­as: Diversidad cultural, Diferentes orÃ­genes sociales, Redes diversas, Experiencias de vida variadas

4. Diversidad geogrÃ¡fica (territorios involucrados):
   - SubcategorÃ­as: Urbano, Rural, IndÃ­gena, Costero, MontaÃ±oso, Transfronterizo

Para cada dimensiÃ³n donde haya informaciÃ³n explÃ­cita o implÃ­cita:

- Indica las subcategorÃ­as identificadas (mÃ­nimo 1)
- Calcula el Ã­ndice de Shannon usando esta fÃ³rmula:  
  H = - Î£ (p_i * ln(p_i)),  
  donde p_i es la proporciÃ³n de menciones por subcategorÃ­a  
- Si solo hay 1 subcategorÃ­a â†’ H = 0  
- Si todas estÃ¡n presentes de forma equilibrada â†’ H â‰ˆ ln(n)

Devuelve exclusivamente un objeto JSON como este:

{{
  "dimensiones": {{
    "Cognitiva": {{
      "subcategorias_detectadas": ["Conocimientos tÃ©cnicos", "Habilidades prÃ¡cticas"],
      "shannon": 0.69,
      "evidencia": "Se mencionan diferentes tipos de saberes tÃ©cnicos y habilidades prÃ¡cticas."
    }},
    "Social": {{
      "subcategorias_detectadas": ["Diversidad cultural"],
      "shannon": 0.0,
      "evidencia": "Participaron ciudadanos de mÃºltiples orÃ­genes culturales."
    }}
  }}
}}

Si no se detecta diversidad en alguna dimensiÃ³n, no incluyas esa dimensiÃ³n en el resultado.
"""

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": MODELO,
        "messages": [
            {"role": "system", "content": "Eres un experto en anÃ¡lisis de diversidad en ciencia ciudadana."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.1,
        "max_tokens": 700
    }

    async with httpx.AsyncClient(timeout=90.0) as client:
        r = await client.post(API_URL, headers=headers, json=payload)
        r.raise_for_status()
        content = r.json()["choices"][0]["message"]["content"]
        match = re.search(r'\{.*\}', content, re.DOTALL)
        if match:
            return json.loads(match.group())
        else:
            return {"error": "No se pudo extraer JSON de la respuesta"}

async def ejecutar_analisis_diversidad():
    with open(INPUT_PATH, "r", encoding="utf-8") as f:
        documentos = json.load(f)

    for doc in documentos:
        print(f"\nðŸ“„ Analizando DIVERSIDAD en: {doc['archivo']}")
        for frase_data in tqdm(doc["frases_contextualizadas"], desc="Diversidad"):
            if frase_data["tipo"] == "diversidad" and frase_data["requiere_contexto"] is False:
                try:
                    resultado = await analizar_diversidad(frase_data["frase"])
                    frase_data["resultado"] = resultado
                except Exception as e:
                    frase_data["resultado"] = {"error": str(e)}

    with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
        json.dump(documentos, f, indent=2, ensure_ascii=False)

    print(f"\nâœ… AnÃ¡lisis de diversidad completado â†’ {OUTPUT_PATH}")

if __name__ == "__main__":
    asyncio.run(ejecutar_analisis_diversidad())
